# class Book():
#     def read(self):
#         print("Чтение интересной истории")
# class StoryReader():
#     def __init__(self):
#         self.book = Book()
#     def tell_story(self):
#         self.book.read()

# Обычно две части не должны связываться между собой.
# Но на этом примере мы как раз и рассматриваем, как делать не надо.

from abc import ABC, abstractmethod
class StorySource(ABC):
    @abstractmethod
    def get_story(self):
        pass
class Book(StorySource):
    def get_story(self):
        print("Чтение интересной истории")
class AudioBook(StorySource):
    def get_story(self):
        print("Чтение интересной истории вслух")
class StoryReader():
    def __init__(self, story_source: StorySource):
        self.story_source = story_source
    def tell_story(self):
        self.story_source.get_story() #Сейчас через абстрактный класс story_source мы должны сослаться на
        # какой-то конкретный источник  — в нашем случае либо книгу, либо аудиокнигу. Для этого пропишем, указав функцию get_story.

# Напомним, что story_source мы задали как источник, а внутри каждого источника мы ранее уже прописали функцию get_story,
# которая будет тем самым вызываться.

book = Book() # создаем объекты класса Book и AudioBook
audioBook = AudioBook()

readerBook = StoryReader(book) #Создадим объект класса StoryReader, в круглых скобках вписав тот объект класса, который хотим сюда передавать:
readerAudioBook = StoryReader(audioBook)

readerBook.tell_story() #Используем созданные ранее объекты, включив функцию tell story:
readerAudioBook.tell_story()

# В первом примере модулем высокого уровня был класс Book. Во втором примере (с использованием принципа) модулем высокого уровня становится абстрактный класс,
# а классы Book и Audiobook наследуются от источника (StorySource), то есть от абстрактного класса. Созданный в первом примере StoryReader сильно зависел от класса Book.
# Во втором примере класс StoryReader вообще ни от чего не зависит, и мы можем использовать любой источник и подкреплять его к этому классу.
#
# В итоге у нас есть два разных источника и абстрактный класс, от которого всё зависит (источники зависят от абстракции). Также мы создали отдельный класс StoryReader,
# который использует эти источники, и мы можем таким образом выводить то, что у нас есть в этих источниках. Затем мы создали объекты классов этих источников,
# создали объект класса StoryReader, чтобы мы могли прочитать историю, и передаём в него какой-то конкретный из источников (книгу либо аудиокнигу).
#
# В этом уроке мы распределили все зависимости: источники наследуют от абстрактного класса StorySource, но при этом жёстких связей, которые мы не можем разорвать
# и которые могут мешать, здесь нет. Это и есть соблюдение принципа инверсии зависимостей.
